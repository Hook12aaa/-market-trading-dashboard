class CurrencyPairGenerator:
    def __init__(self):
        self.major_currencies = ['USD', 'EUR', 'JPY', 'GBP', 'CHF', 'CAD', 'AUD', 'NZD']
        self.minor_currencies = ['SEK', 'NOK', 'DKK', 'SGD', 'HKD']
        self.emerging_currencies = [
            'CNH', 'MXN', 'BRL', 'ZAR', 'TRY',
            'PLN', 'CZK', 'HUF', 'ILS', 'THB'
        ]
        
        self.currency_hierarchy = {
            'EUR': 1, 'GBP': 2, 'AUD': 3, 'NZD': 4, 'USD': 5, 
            'CAD': 6, 'CHF': 7, 'JPY': 8
        }
        
        self.valid_quotes = {
            'EUR': ['USD', 'JPY', 'GBP', 'CHF', 'CAD', 'AUD', 'NZD', 'SEK', 'NOK', 'DKK'],
            'GBP': ['USD', 'JPY', 'EUR', 'CHF', 'AUD', 'CAD', 'NZD'],
            'USD': ['JPY', 'CAD', 'CHF', 'SEK', 'NOK', 'DKK', 'SGD', 'HKD'] + self.emerging_currencies,
            'AUD': ['USD', 'JPY', 'NZD', 'CAD'],
            'NZD': ['USD', 'JPY', 'CAD'],
            'CAD': ['JPY'],
            'CHF': ['JPY'],
            'JPY': []
        }
    
    def _should_swap(self, base, quote):
        base_rank = self.currency_hierarchy.get(base, 100)
        quote_rank = self.currency_hierarchy.get(quote, 100)
        return base_rank > quote_rank
    
    def format_pair(self, base, quote):
        if self._should_swap(base, quote):
            base, quote = quote, base
        return f"{base}/{quote}"
    
    def get_yahoo_symbol(self, pair):
        return f"{pair.replace('/', '')}=X"
    
    def generate_major_pairs(self):
        pairs = {}
        for base, valid_quotes in self.valid_quotes.items():
            for quote in valid_quotes:
                if quote in self.major_currencies:
                    pair = self.format_pair(base, quote)
                    pairs[pair] = self.get_yahoo_symbol(pair)
        return pairs
    
    def generate_minor_pairs(self):
        pairs = {}
        for minor in self.minor_currencies:
            for major in ['USD', 'EUR']:
                pair = f"{major}/{minor}" 
                pairs[pair] = self.get_yahoo_symbol(pair)
        return pairs
    
    def generate_emerging_pairs(self):
        pairs = {}
        for em in self.emerging_currencies:
            for major in ['USD', 'EUR']:
                pair = f"{major}/{em}"  
                pairs[pair] = self.get_yahoo_symbol(pair)
        return pairs
    
    def generate_cross_rates(self):
        pairs = {}
        for base, valid_quotes in self.valid_quotes.items():
            if base != 'USD': 
                for quote in valid_quotes:
                    if quote != 'USD':  
                        pair = self.format_pair(base, quote)
                        pairs[pair] = self.get_yahoo_symbol(pair)
        return pairs
    
    def generate_all_pairs(self):
        pairs_by_category = {
            'major_pairs': self.generate_major_pairs(),
            'minor_pairs': self.generate_minor_pairs(),
            'emerging_pairs': self.generate_emerging_pairs(),
            'cross_rates': self.generate_cross_rates()
        }
        return {'forex_pairs': pairs_by_category}


if __name__ == "__main__":
    generator = CurrencyPairGenerator()
    all_pairs = generator.generate_all_pairs()
    
    print("Pairs generated by category:")
    for category, pairs in all_pairs['forex_pairs'].items():
        print(f"{category}: {len(pairs)} pairs")
        if category == 'major_pairs':
            print("Major pairs:", sorted(pairs.keys()))
    
    total_pairs = sum(len(pairs) for pairs in all_pairs['forex_pairs'].values())
    print(f"\nTotal pairs generated: {total_pairs}")